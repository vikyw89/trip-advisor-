/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/{user_id}": {
    /**
     * Read User
     * @description A function that reads a user based on the provided user ID.
     *
     *     Parameters:
     *         user_id (int): The ID of the user.
     *
     *     Returns:
     *         ReadUserResponse: The response containing the user ID and name.
     */
    get: operations["read_user_users__user_id__get"];
  };
  "/users/{user_id}/messages": {
    /**
     * Read User Messages
     * @description Read user messages.
     *
     *     Args:
     *         user_id (int): The ID of the user.
     *
     *     Returns:
     *         ReadUserMessagesResponse: An instance of the ReadUserMessagesResponse
     *             class containing the user messages.
     *
     *     Raises:
     *         None.
     *
     *     Description:
     *         This function is used to read user messages. It takes the user ID as
     *         input and returns an instance of the ReadUserMessagesResponse class
     *         containing the user messages.
     */
    get: operations["read_user_messages_users__user_id__messages_get"];
    /**
     * Create User Message
     * @description Create a new message for a user.
     *
     *     Args:
     *         user_id (int): The ID of the user.
     *         input (CreateUserMessageInput): The input data for creating the user message.
     *
     *     Returns:
     *         ReadUserMessagesResponse: The response containing the user's updated messages.
     */
    post: operations["create_user_message_users__user_id__messages_post"];
  };
  "/users/{user_id}/messages/subscribe": {
    /**
     * Subscribe User Messages
     * @description Subscribe to user messages.
     *
     *     This function subscribes to user messages for a given user ID. It returns a generator that yields messages as they are received.
     *
     *     :param user_id: The ID of the user to subscribe to messages.
     *     :type user_id: int
     *     :return: A generator that yields Message objects.
     *     :rtype: Generator[Message, None, None]
     */
    get: operations["subscribe_user_messages_users__user_id__messages_subscribe_get"];
  };
  "/users/{user_id}/itineraries": {
    /**
     * Save User Itinerary
     * @description Saves a user's itinerary.
     *
     *     Args:
     *         user_id (int): The ID of the user.
     *         input (SaveUserItineraryInput): The input data for saving the user's itinerary.
     *
     *     Returns:
     *         SaveUserItineraryResponse: The response containing the status, success flag, and itinerary ID.
     */
    post: operations["save_user_itinerary_users__user_id__itineraries_post"];
  };
  "/users/{user_id}/locations": {
    /**
     * Save User Location
     * @description Save a user's location.
     *
     *     Args:
     *         user_id (int): The ID of the user.
     *         input (SaveUserLocationInput): The input data for saving the user's location.
     *
     *     Returns:
     *         SaveUserItineraryResponse: The response object indicating the status and success of saving the user's location.
     */
    post: operations["save_user_location_users__user_id__locations_post"];
  };
  "/": {
    /** Read Root */
    get: operations["read_root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CreateUserMessageInput */
    CreateUserMessageInput: {
      /** Text */
      text?: string;
      /** File Url */
      file_url?: string;
    };
    /** CreateUserMessageResponse */
    CreateUserMessageResponse: {
      /** Success */
      success: boolean;
      /** Code */
      code: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Message */
    Message: {
      /** Id */
      id: string;
      /** Text */
      text: string;
      /** Is User */
      is_user: boolean;
    };
    /** MessageEvent */
    MessageEvent: {
      /**
       * Event
       * @enum {string}
       */
      event: "create" | "update" | "delete";
      message: components["schemas"]["Message"];
    };
    /** ReadUserMessagesResponse */
    ReadUserMessagesResponse: {
      /** Messages */
      messages: components["schemas"]["Message"][];
    };
    /** ReadUserResponse */
    ReadUserResponse: {
      /** User Id */
      user_id: string;
      /** Name */
      name: string;
    };
    /** SaveUserItineraryInput */
    SaveUserItineraryInput: {
      /** Content */
      content: string;
    };
    /** SaveUserItineraryResponse */
    SaveUserItineraryResponse: {
      /** Status */
      status: number;
      /** Success */
      success: boolean;
      /** Itinerary Id */
      itinerary_id: string;
    };
    /** SaveUserLocationInput */
    SaveUserLocationInput: {
      /** Latitude */
      latitude: number;
      /** Longitude */
      longitude: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Read User
   * @description A function that reads a user based on the provided user ID.
   *
   *     Parameters:
   *         user_id (int): The ID of the user.
   *
   *     Returns:
   *         ReadUserResponse: The response containing the user ID and name.
   */
  read_user_users__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadUserResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Read User Messages
   * @description Read user messages.
   *
   *     Args:
   *         user_id (int): The ID of the user.
   *
   *     Returns:
   *         ReadUserMessagesResponse: An instance of the ReadUserMessagesResponse
   *             class containing the user messages.
   *
   *     Raises:
   *         None.
   *
   *     Description:
   *         This function is used to read user messages. It takes the user ID as
   *         input and returns an instance of the ReadUserMessagesResponse class
   *         containing the user messages.
   */
  read_user_messages_users__user_id__messages_get: {
    parameters: {
      query?: {
        order?: "asc" | "desc";
        limit?: number;
        after?: string;
        before?: string;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadUserMessagesResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create User Message
   * @description Create a new message for a user.
   *
   *     Args:
   *         user_id (int): The ID of the user.
   *         input (CreateUserMessageInput): The input data for creating the user message.
   *
   *     Returns:
   *         ReadUserMessagesResponse: The response containing the user's updated messages.
   */
  create_user_message_users__user_id__messages_post: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserMessageInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CreateUserMessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Subscribe User Messages
   * @description Subscribe to user messages.
   *
   *     This function subscribes to user messages for a given user ID. It returns a generator that yields messages as they are received.
   *
   *     :param user_id: The ID of the user to subscribe to messages.
   *     :type user_id: int
   *     :return: A generator that yields Message objects.
   *     :rtype: Generator[Message, None, None]
   */
  subscribe_user_messages_users__user_id__messages_subscribe_get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MessageEvent"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Save User Itinerary
   * @description Saves a user's itinerary.
   *
   *     Args:
   *         user_id (int): The ID of the user.
   *         input (SaveUserItineraryInput): The input data for saving the user's itinerary.
   *
   *     Returns:
   *         SaveUserItineraryResponse: The response containing the status, success flag, and itinerary ID.
   */
  save_user_itinerary_users__user_id__itineraries_post: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SaveUserItineraryInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveUserItineraryResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Save User Location
   * @description Save a user's location.
   *
   *     Args:
   *         user_id (int): The ID of the user.
   *         input (SaveUserLocationInput): The input data for saving the user's location.
   *
   *     Returns:
   *         SaveUserItineraryResponse: The response object indicating the status and success of saving the user's location.
   */
  save_user_location_users__user_id__locations_post: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SaveUserLocationInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveUserItineraryResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Read Root */
  read_root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
